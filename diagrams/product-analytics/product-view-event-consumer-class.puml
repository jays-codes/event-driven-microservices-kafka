@startuml ProductViewEventConsumer Class Diagram

title Product Analytics - Complete Architecture

package "Controller Layer" {
    class TrendingController {
        - final TrendingProductsBroadcastService service
        
        + TrendingController(TrendingProductsBroadcastService)
        + Flux trending()
    }
}

package "Service Layer" {
    class ProductViewEventConsumer {
        - final ReactiveKafkaConsumerTemplate template
        - final ProductViewAnalyticsService analyticsService
        
        + ProductViewEventConsumer(ReactiveKafkaConsumerTemplate, ProductViewAnalyticsService)
        + void subscribe()
    }
    
    class ProductViewAnalyticsService {
        - final ProductViewRepository pvrepo
        - final Sinks.Many sink
        - final Flux flux
        
        + ProductViewAnalyticsService(ProductViewRepository)
        + Mono processBatch(List events)
        + Flux getCompanionFlux()
        - ProductViewCount updateViewCount(Map dbMap, Map evtMap, int productId)
    }
    
    class TrendingProductsBroadcastService {
        - final ProductViewRepository repo
        - final ProductViewAnalyticsService analyticsService
        - Flux trends
        
        + TrendingProductsBroadcastService(ProductViewRepository, ProductViewAnalyticsService)
        + Flux getTrends()
        - void init()
    }
}

package "Repository Layer" {
    interface ProductViewRepository {
        + Flux findTop5ByOrderByCountDesc()
        + Flux findAllById(Iterable ids)
        + Flux saveAll(Iterable entities)
    }
    
    interface ReactiveCrudRepository {
        + Flux findAllById(Iterable ids)
        + Flux saveAll(Iterable entities)
    }
}

package "Entity Layer" {
    class ProductViewCount {
        + Integer id
        + Long count
        + boolean isNew
        
        + ProductViewCount(Integer id, Long count, boolean isNew)
        + boolean isNew()
        + Integer getId()
        + Long getCount()
        + void setCount(Long count)
        + void setNew(boolean isNew)
    }
    
    interface Persistable {
        + Object getId()
        + boolean isNew()
    }
}

package "DTO Layer" {
    class ProductTrendingDTO {
        + Integer productId
        + Long viewCount
        
        + Integer getProductId()
        + Long getViewCount()
        + void setProductId(Integer productId)
        + void setViewCount(Long viewCount)
    }
}

package "Event Layer" {
    class ProductViewEvent {
        + Integer productId
        
        + Integer getProductId()
        + void setProductId(Integer productId)
    }
}

package "Kafka Integration" {
    class ReactiveKafkaConsumerTemplate {
        - ReceiverOptions receiverOptions
        
        + ReactiveKafkaConsumerTemplate(ReceiverOptions options)
        + Flux receive()
    }
    
    class ReceiverRecord {
        - Object key
        - Object value
        - ReceiverOffset receiverOffset
        
        + Object key()
        + Object value()
        + ReceiverOffset receiverOffset()
    }
    
    class ReceiverOffset {
        + void acknowledge()
    }
}

package "Reactive Streams" {
    class Mono {
        + Mono then()
        + Mono map(Function mapper)
        + Mono flatMap(Function mapper)
        + Flux flatMapMany(Function mapper)
        + Mono doOnNext(Consumer action)
        + Mono doOnError(Consumer action)
        + Mono doOnComplete(Runnable action)
        + Mono defaultIfEmpty(Object defaultValue)
    }
    
    class Flux {
        + Flux bufferTimeout(int maxSize, Duration maxTime)
        + Mono then()
        + Flux map(Function mapper)
        + Mono collectMap(Function keyMapper)
        + Disposable subscribe()
        + Flux repeatWhen(Function)
        + Flux distinctUntilChanged()
        + Flux cache(int)
    }
    
    class "Sinks.Many" as SinksMany {
        + Sinks.Many unicast()
        + EmitResult tryEmitNext(Object)
        + Flux asFlux()
    }
}

TrendingController --> TrendingProductsBroadcastService : uses

ProductViewEventConsumer --> ReactiveKafkaConsumerTemplate : uses
ProductViewEventConsumer --> ProductViewAnalyticsService : delegates to

ProductViewAnalyticsService --> ProductViewRepository : writes to
TrendingProductsBroadcastService --> ProductViewRepository : reads from
TrendingProductsBroadcastService --> ProductViewAnalyticsService : uses companion flux

ProductViewAnalyticsService --> ProductViewEvent : processes
ProductViewAnalyticsService --> ProductViewCount : creates/updates
ProductViewAnalyticsService --> ReceiverRecord : receives
ProductViewAnalyticsService --> SinksMany : uses for event signaling

TrendingProductsBroadcastService --> ProductViewCount : reads
TrendingProductsBroadcastService --> ProductTrendingDTO : produces

TrendingController --> ProductTrendingDTO : returns

ProductViewRepository --> ProductViewCount : manages
ProductViewRepository --|> ReactiveCrudRepository : extends

ProductViewCount --|> Persistable : implements

ReactiveKafkaConsumerTemplate --> ReceiverRecord : produces
ReceiverRecord --> ReceiverOffset : contains
ReceiverRecord --> ProductViewEvent : contains as value

ProductViewEventConsumer --> Mono : returns from subscribe
ProductViewAnalyticsService --> Mono : returns from processBatch
TrendingProductsBroadcastService --> Flux : returns from getTrends
TrendingController --> Flux : returns from trending
ReactiveKafkaConsumerTemplate --> Flux : returns
ProductViewRepository --> Flux : returns

note right of TrendingController
  **REST API Layer**
  • Exposes trending data via Server-Sent Events
  • Uses TEXT_EVENT_STREAM for real-time updates
  • Simple delegation to broadcast service
  • Reactive endpoint for live data streaming
end note

note right of ProductViewEventConsumer
  **Kafka Integration Layer**
  • Pure infrastructure component
  • Handles Kafka consumption
  • Delegates business logic
  • Uses bufferTimeout for batching
  • Simplified and focused
end note

note right of ProductViewAnalyticsService
  **Write Operations Service**
  • Handles analytics processing
  • Manages view count aggregation
  • Implements upsert pattern
  • Controls database write operations
  • Processes Kafka events in batches
end note

note right of TrendingProductsBroadcastService
  **Read Operations Service**
  • Handles trending data broadcasts
  • Event-driven updates via companion flux
  • Real-time response to data changes
  • Filters empty results
  • Cached reactive stream for performance
end note

note right of ProductViewRepository  
  **Shared Data Access Layer**
  • Used by both Analytics (write) and Broadcast (read)
  • Spring Data R2DBC Repository
  • Custom findTop5ByOrderByCountDesc() for trending
  • Reactive database operations
end note

note left of ProductViewAnalyticsService
  **Enhanced Event-Driven Architecture:**
  
  **Write Path (Event-Driven):**
  Kafka → Consumer → Analytics → Repository → Database → Sink Signal
  
  **Read Path (Event-Driven):**
  Sink Signal → Companion Flux → Broadcast → Controller → Client
  
  **Benefits:**
  • Real-time updates: No polling delays
  • Event-driven: Immediate response to changes
  • Efficient: Updates only when data changes
  • Decoupled: Write and read paths independent
  • Reactive: Full end-to-end streaming
end note

@enduml